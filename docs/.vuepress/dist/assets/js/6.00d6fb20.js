(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{244:function(t,s,a){"use strict";a.r(s);var n=a(245),r=a.n(n);for(var e in n)["default"].indexOf(e)<0&&function(t){a.d(s,t,(function(){return n[t]}))}(e);s.default=r.a},245:function(t,s){},344:function(t,s,a){"use strict";a.d(s,"a",(function(){return n})),a.d(s,"b",(function(){return r}));var n=function(){var t=this,s=t._self._c;t._self._setupProxy;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h2",{attrs:{id:"作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用域"}},[t._v("#")]),t._v(" 作用域")]),t._v(" "),s("h3",{attrs:{id:"概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),s("p",[t._v('规定了变量能够访问的一个范围，离开这个范围"变量"就不能被访问')]),t._v(" "),s("h3",{attrs:{id:"全局作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#全局作用域"}},[t._v("#")]),t._v(" 全局作用域")]),t._v(" "),s("p",[t._v("注意：")]),t._v(" "),s("ol",[s("li",[t._v("因为window对象添加属性也是全局的")]),t._v(" "),s("li",[t._v("函数中未声明的关键字变量为全局变量")]),t._v(" "),s("li",[t._v("尽可能声明全局变量，防止全局变量被污染")])]),t._v(" "),s("h3",{attrs:{id:"局部作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#局部作用域"}},[t._v("#")]),t._v(" 局部作用域")]),t._v(" "),s("h4",{attrs:{id:"函数作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#函数作用域"}},[t._v("#")]),t._v(" 函数作用域")]),t._v(" "),s("p",[t._v("函数内部声明的变量只能被函数内部访问，外部无法直接访问。")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("fun")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("let")]),t._v(" name "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'lisi'")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// lisi")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 此处报错，函数外部不能使用函数内部的局部变量")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("总结：")]),t._v(" "),s("ol",[s("li",[t._v("函数内部声明的变量，在函数外部无法被访问")]),t._v(" "),s("li",[t._v("函数的参数也是函数内部的局部变量")]),t._v(" "),s("li",[t._v("不同的函数内部声明的变量无法互相访问")]),t._v(" "),s("li",[t._v("函数执行完毕后，函数内部的变量实际被清空了")])]),t._v(" "),s("h4",{attrs:{id:"块作用域"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#块作用域"}},[t._v("#")]),t._v(" 块作用域")]),t._v(" "),s("p",[t._v("{},代码块内部声明的变量外部将有可能无法被访问到")]),t._v(" "),s("div",{staticClass:"language-javascript line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-javascript"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 代码块")]),t._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nconsole"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("i"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br")])]),s("p",[t._v("总结：")]),t._v(" "),s("ol",[s("li",[t._v("let声明的变量会产生块作用域，var声明的变量不会产生块作用域")]),t._v(" "),s("li",[t._v("const声明的变量会产生块作用域")]),t._v(" "),s("li",[t._v("不同代码块之间变量不能互通访问")]),t._v(" "),s("li",[t._v("推荐使用let和const")])]),t._v(" "),s("h3",{attrs:{id:"作用域链"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#作用域链"}},[t._v("#")]),t._v(" 作用域链")]),t._v(" "),s("p",[t._v("本质就是底层变量的查找机制")]),t._v(" "),s("ul",[s("li",[t._v("在函数被访问时，优先查找当前函数作用域中的变量")]),t._v(" "),s("li",[t._v("如果当前查找不到则会依次逐级查找父级作用域直到全局作用域")])]),t._v(" "),s("blockquote",[s("p",[t._v("话术：当前作用域查找，如果当前作用域没有，到上一级作用域查找，一直查找查找到最近的，一直查找到全局作用域为止")])]),t._v(" "),s("ol",[s("li",[t._v("作用域链的本质是什么？")]),t._v(" "),s("li",[t._v("作用域链的查找规则是什么？")])]),t._v(" "),s("h2",{attrs:{id:"垃圾回收机制-gc"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#垃圾回收机制-gc"}},[t._v("#")]),t._v(" 垃圾回收机制 GC")]),t._v(" "),s("p",[t._v("JS中内存的分配和回收都是自动完成的，内存在不使用的时候会被垃圾回收器自动回收的\njs内存的生命周期")]),t._v(" "),s("ul",[s("li",[t._v("分配内存")]),t._v(" "),s("li",[t._v("使用内存")]),t._v(" "),s("li",[t._v("回收内存\n说明：\n全局变量一般不会回收\n局部变量的值不用了，就会自动回收")])]),t._v(" "),s("p",[t._v("内存泄漏：程序中分配的内存某种原因无法释放或者未释放叫做内存泄漏")]),t._v(" "),s("p",[t._v("js垃圾回收机机制的方法：标记清除法和引用计数法")]),t._v(" "),s("ul",[s("li",[t._v("标记清除法"),s("br"),t._v("\n比如我们定义了一个数组，然乎这个数组会在栈里面开辟一个内存地址，指向堆里面的数组，表示数组被引用了，我们就标记为1；"),s("br"),t._v("\n当我们把变量赋值为一个null，没有内存地址指向这个数组，没有被引用就变成0自动就被回收了"),s("br"),t._v("\n嵌套或两个对象相互应用会导致内存泄漏")]),t._v(" "),s("li",[t._v("引用计数法"),s("br"),t._v("\n从根部扫描对象，能查到的就是使用的，查不到就要回收")])])])},r=[]},345:function(t,s,a){"use strict";a.r(s);var n=a(344),r=a(244);for(var e in r)["default"].indexOf(e)<0&&function(t){a.d(s,t,(function(){return r[t]}))}(e);var v=a(12),_=Object(v.a)(r.default,n.a,n.b,!1,null,null,null);s.default=_.exports}}]);